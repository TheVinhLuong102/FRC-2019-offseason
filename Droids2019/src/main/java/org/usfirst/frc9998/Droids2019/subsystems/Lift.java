// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc9998.Droids2019.subsystems;


import org.usfirst.frc9998.Droids2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
 import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.CANSparkMax;
import edu.wpi.first.wpilibj.DigitalInput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

import com.revrobotics.CANEncoder;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Lift extends Subsystem {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax liftMotor;
    private DigitalInput limitSwitchUp;
    private DigitalInput limitSwitchDown;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANEncoder liftEncoder;

    public Lift() {
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        liftMotor = new CANSparkMax(5, MotorType.kBrushless);
        
        
        
        limitSwitchUp = new DigitalInput(0);
        addChild("Limit Switch Up",limitSwitchUp);
        
        
        limitSwitchDown = new DigitalInput(1);
        addChild("Limit Switch Down",limitSwitchDown);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        liftEncoder = liftMotor.getEncoder();
        liftEncoder.setPosition(0.0);
    }
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new LiftJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        SmartDashboard.putNumber("Lift encoder", liftEncoder.getPosition());
    }

    public void setRawSpeed(double speed) {
        //System.out.println("lift speed: "+speed);
        SmartDashboard.putNumber("Lift speed", speed);
        liftMotor.set(speed);
        
    }

    public void setSpeed(double speed) {
        if (speed < 0.0) {
            if (limitSwitchUp.get() == false) { // note false and true are inverted for the hall effect sensor
                this.setRawSpeed(0.0);
            } else if (limitSwitchUp.get() == true) {
                this.setRawSpeed(speed);
            }
        } else if (speed > 0.0) {
            if (limitSwitchDown.get() == false) { // note false and true are inverted for the hall effect sensor
                this.setRawSpeed(0.0);
                liftEncoder.setPosition(0.0);
            } else if (limitSwitchDown.get() == true) {
                this.setRawSpeed(speed);
            }
        } else {
            this.setRawSpeed(0.0);
        }
        //System.out.println("limit switch "+limitSwitchUp.get());
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

