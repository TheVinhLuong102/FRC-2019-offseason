// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc9998.Droids2019.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc9998.Droids2019.Robot;

/**
 *
 */
public class GoToTarget extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public GoToTarget() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        Robot.lightDrive.onGreenLight();

        double track = Robot.cVReciever.getData()*27.0/320.0;
        System.out.println("CVReciever: "+track*320.0/27.0);
        // Robot.driveTrain.setTankSpeed(track/320.0, -track/320.0);

        double baseSpeed;
        double correction;
    
        if (track != 0) {
          // we only move if we see a target
          if ((Math.abs(track) < 5)) {
            // move into the target if and only if the angular error is less
            // than 5 degrees and the tape only covers 1.7% of the frame
            correction = track/27.0;
            baseSpeed = 0.0; // set speed to move into target
            // baseSpeed = 0.7; // set speed to move into target
            System.out.println("move in!!");
          } else {
            // otherwise turn towards the target (i.e. set speed = 0)
            correction = track/27.0+(Math.abs(track)/track)*0.3;
            baseSpeed = 0.0;
          }
    
          System.out.println("correction: "+correction);
          Robot.driveTrain.setTankSpeed(
          ((baseSpeed - correction))*0.3,
          ((baseSpeed + correction))*0.3);

        }

    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.lightDrive.offGreenLight();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.lightDrive.offGreenLight();
    }
}
