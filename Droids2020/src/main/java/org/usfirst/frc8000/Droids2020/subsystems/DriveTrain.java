// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc8000.Droids2020.subsystems;


import org.usfirst.frc8000.Droids2020.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANEncoder;
import com.revrobotics.ControlType;
import com.revrobotics.CANPIDController;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax driveLeftRear;
    private CANSparkMax driveLeftFront;
    private SpeedControllerGroup speedControllerGroup1;
    private CANSparkMax driveRightFront;
    private CANSparkMax driveRightRear;
    private SpeedControllerGroup speedControllerGroup2;
    private DifferentialDrive differentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    //private CANSparkMax leftRearMotor;
    //private CANSparkMax leftFrontMotor;

    public DriveTrain() {

        driveLeftRear = new CANSparkMax(1, MotorType.kBrushless);
		driveLeftRear.setIdleMode(IdleMode.kBrake);
		driveLeftRear.setSmartCurrentLimit(90);

        driveLeftFront = new CANSparkMax(2, MotorType.kBrushless);
		driveLeftFront.setIdleMode(IdleMode.kBrake);
        driveLeftFront.setSmartCurrentLimit(90);
        
        driveRightFront = new CANSparkMax(3, MotorType.kBrushless);
		driveRightFront.setIdleMode(IdleMode.kBrake);
		driveRightFront.setSmartCurrentLimit(90);

        driveRightRear = new CANSparkMax(4, MotorType.kBrushless);
		driveRightRear.setIdleMode(IdleMode.kBrake);
		driveRightRear.setSmartCurrentLimit(90);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        
        
        
        speedControllerGroup1 = new SpeedControllerGroup(driveLeftRear, driveLeftFront  );
        addChild("Speed Controller Group 1",speedControllerGroup1);
        
    
        
        
        speedControllerGroup2 = new SpeedControllerGroup(driveRightRear, driveRightFront  );
        addChild("Speed Controller Group 2",speedControllerGroup2);
        
        
        differentialDrive1 = new DifferentialDrive(speedControllerGroup1, speedControllerGroup2);
        addChild("Differential Drive 1",differentialDrive1);
        differentialDrive1.setSafetyEnabled(true);
        differentialDrive1.setExpiration(0.1);
        differentialDrive1.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

	public void setSpeed(double speed) {
		//System.out.println(liftMotor.getSelectedSensorPosition());

		//      SmartDashboard.putNumber("lift Amp", liftMotor.getOutputCurrent());
        //leftRearMotor.set(speed);
        //leftFrontMotor.set(speed);

        differentialDrive1.tankDrive(speed, speed); // Move

    }
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new MoveOff());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

